Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> e
Rule 2     e -> e PLUS e
Rule 3     e -> e MINUS e
Rule 4     e -> e TIMES e
Rule 5     e -> e DIV e
Rule 6     e -> NUMBER

Terminals, with rules where they appear

DIV                  : 5
MINUS                : 3
NUMBER               : 6
PLUS                 : 2
TIMES                : 4
error                : 

Nonterminals, with rules where they appear

e                    : 1 2 2 3 3 4 4 5 5
expression           : 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . e
    (2) e -> . e PLUS e
    (3) e -> . e MINUS e
    (4) e -> . e TIMES e
    (5) e -> . e DIV e
    (6) e -> . NUMBER

    NUMBER          shift and go to state 3

    expression                     shift and go to state 1
    e                              shift and go to state 2

state 1

    (0) S' -> expression .



state 2

    (1) expression -> e .
    (2) e -> e . PLUS e
    (3) e -> e . MINUS e
    (4) e -> e . TIMES e
    (5) e -> e . DIV e

    $end            reduce using rule 1 (expression -> e .)
    PLUS            shift and go to state 4
    MINUS           shift and go to state 5
    TIMES           shift and go to state 6
    DIV             shift and go to state 7


state 3

    (6) e -> NUMBER .

    PLUS            reduce using rule 6 (e -> NUMBER .)
    MINUS           reduce using rule 6 (e -> NUMBER .)
    TIMES           reduce using rule 6 (e -> NUMBER .)
    DIV             reduce using rule 6 (e -> NUMBER .)
    $end            reduce using rule 6 (e -> NUMBER .)


state 4

    (2) e -> e PLUS . e
    (2) e -> . e PLUS e
    (3) e -> . e MINUS e
    (4) e -> . e TIMES e
    (5) e -> . e DIV e
    (6) e -> . NUMBER

    NUMBER          shift and go to state 3

    e                              shift and go to state 8

state 5

    (3) e -> e MINUS . e
    (2) e -> . e PLUS e
    (3) e -> . e MINUS e
    (4) e -> . e TIMES e
    (5) e -> . e DIV e
    (6) e -> . NUMBER

    NUMBER          shift and go to state 3

    e                              shift and go to state 9

state 6

    (4) e -> e TIMES . e
    (2) e -> . e PLUS e
    (3) e -> . e MINUS e
    (4) e -> . e TIMES e
    (5) e -> . e DIV e
    (6) e -> . NUMBER

    NUMBER          shift and go to state 3

    e                              shift and go to state 10

state 7

    (5) e -> e DIV . e
    (2) e -> . e PLUS e
    (3) e -> . e MINUS e
    (4) e -> . e TIMES e
    (5) e -> . e DIV e
    (6) e -> . NUMBER

    NUMBER          shift and go to state 3

    e                              shift and go to state 11

state 8

    (2) e -> e PLUS e .
    (2) e -> e . PLUS e
    (3) e -> e . MINUS e
    (4) e -> e . TIMES e
    (5) e -> e . DIV e

    PLUS            reduce using rule 2 (e -> e PLUS e .)
    MINUS           reduce using rule 2 (e -> e PLUS e .)
    $end            reduce using rule 2 (e -> e PLUS e .)
    TIMES           shift and go to state 6
    DIV             shift and go to state 7

  ! TIMES           [ reduce using rule 2 (e -> e PLUS e .) ]
  ! DIV             [ reduce using rule 2 (e -> e PLUS e .) ]
  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]


state 9

    (3) e -> e MINUS e .
    (2) e -> e . PLUS e
    (3) e -> e . MINUS e
    (4) e -> e . TIMES e
    (5) e -> e . DIV e

    PLUS            reduce using rule 3 (e -> e MINUS e .)
    MINUS           reduce using rule 3 (e -> e MINUS e .)
    $end            reduce using rule 3 (e -> e MINUS e .)
    TIMES           shift and go to state 6
    DIV             shift and go to state 7

  ! TIMES           [ reduce using rule 3 (e -> e MINUS e .) ]
  ! DIV             [ reduce using rule 3 (e -> e MINUS e .) ]
  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]


state 10

    (4) e -> e TIMES e .
    (2) e -> e . PLUS e
    (3) e -> e . MINUS e
    (4) e -> e . TIMES e
    (5) e -> e . DIV e

    PLUS            reduce using rule 4 (e -> e TIMES e .)
    MINUS           reduce using rule 4 (e -> e TIMES e .)
    TIMES           reduce using rule 4 (e -> e TIMES e .)
    DIV             reduce using rule 4 (e -> e TIMES e .)
    $end            reduce using rule 4 (e -> e TIMES e .)

  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]
  ! TIMES           [ shift and go to state 6 ]
  ! DIV             [ shift and go to state 7 ]


state 11

    (5) e -> e DIV e .
    (2) e -> e . PLUS e
    (3) e -> e . MINUS e
    (4) e -> e . TIMES e
    (5) e -> e . DIV e

    PLUS            reduce using rule 5 (e -> e DIV e .)
    MINUS           reduce using rule 5 (e -> e DIV e .)
    TIMES           reduce using rule 5 (e -> e DIV e .)
    DIV             reduce using rule 5 (e -> e DIV e .)
    $end            reduce using rule 5 (e -> e DIV e .)

  ! PLUS            [ shift and go to state 4 ]
  ! MINUS           [ shift and go to state 5 ]
  ! TIMES           [ shift and go to state 6 ]
  ! DIV             [ shift and go to state 7 ]

